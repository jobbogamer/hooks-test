{"version":3,"sources":["NameList.js","App.js","serviceWorker.js","index.js"],"names":["NameList","_ref","amount","region","_useState","useState","_useState2","Object","slicedToArray","loaded","setLoaded","_useState3","_useState4","names","setNames","useEffect","regionParam","concat","axios","get","then","response","data","react_default","a","createElement","map","name","style","color","gender","surname","displayName","regions","ðŸ‡ºðŸ‡¸","ðŸ‡¬ðŸ‡§","ðŸ‡©ðŸ‡ª","ðŸ‡ªðŸ‡¸","ðŸ‡«ðŸ‡·","App","setAmount","setRegion","display","flexDirection","justifyContent","alignItems","src_NameList","onClick","height","fontSize","keys","regionKey","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2PAKMA,EAAW,SAAAC,GAAwB,IAArBC,EAAqBD,EAArBC,OAAQC,EAAaF,EAAbE,OAAaC,EACXC,oBAAS,GADEC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAChCK,EADgCH,EAAA,GACxBI,EADwBJ,EAAA,GAAAK,EAEbN,mBAAS,IAFIO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAEhCE,EAFgCD,EAAA,GAEzBE,EAFyBF,EAAA,GAgBvC,OAZAG,oBACE,WACE,IAAMC,EAAcb,EAAM,WAAAc,OAAcd,GAAW,GACnDO,GAAU,GACVQ,IAAMC,IAAN,GAAAF,OAVU,2BAUV,YAAAA,OAA+Bf,GAA/Be,OAAwCD,IAAeI,KAAK,SAAAC,GAC1DP,EAASO,EAASC,MAClBZ,GAAU,MAGd,CAACR,EAAQC,IAGNM,EAKHc,EAAAC,EAAAC,cAAA,UACGZ,EAAMa,IAAI,SAAAC,GAAI,OACbJ,EAAAC,EAAAC,cAAA,MAAIG,MAAO,CAAEC,MAAuB,SAAhBF,EAAKG,OAAoB,OAAS,YACnDH,EAAKA,KADR,IACeA,EAAKI,QADpB,KAC+BJ,EAAKxB,WAPjCoB,EAAAC,EAAAC,cAAA,wBAcXzB,EAASgC,YAAc,WAERhC,QCjCTiC,EAAU,CACdC,2BAAQ,gBACRC,2BAAQ,UACRC,2BAAQ,UACRC,2BAAQ,QACRC,2BAAQ,UAoCKC,EAjCH,WAAM,IAAAnC,EACYC,mBAAS,GADrBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACTF,EADSI,EAAA,GACDkC,EADClC,EAAA,GAAAK,EAEYN,mBAAS,MAFrBO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAETR,EAFSS,EAAA,GAED6B,EAFC7B,EAAA,GAIhB,OACEW,EAAAC,EAAAC,cAAA,OACEG,MAAO,CACLc,QAAS,OACTC,cAAe,SACfC,eAAgB,SAChBC,WAAY,WAEdtB,EAAAC,EAAAC,cAAA,UAAKvB,EAAL,UACAqB,EAAAC,EAAAC,cAACqB,EAAD,CAAU5C,OAAQA,EAAQC,OAAQA,IAClCoB,EAAAC,EAAAC,cAAA,UAAQsB,QAAS,kBAAMP,EAAUtC,EAAS,KAA1C,YACAqB,EAAAC,EAAAC,cAAA,OAAKG,MAAO,CAAEoB,OAAQ,UACtBzB,EAAAC,EAAAC,cAAA,OACEG,MAAO,CACLc,QAAS,OACTC,cAAe,MACfE,WAAY,SACZI,SAAU,QAEX1C,OAAO2C,KAAKjB,GAASP,IAAI,SAAAyB,GAAS,OACjC5B,EAAAC,EAAAC,cAAA,UAAQsB,QAAS,kBAAMN,EAAUR,EAAQkB,MACtCA,QC1BOC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnC,EAAAC,EAAAC,cAACkC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5C,KAAK,SAAA6C,GACjCA,EAAaC","file":"static/js/main.9d193ee2.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst API_URL = 'https://uinames.com/api/';\n\nconst NameList = ({ amount, region }) => {\n  const [loaded, setLoaded] = useState(false);\n  const [names, setNames] = useState([]);\n\n  useEffect(\n    () => {\n      const regionParam = region ? `&region=${region}` : '';\n      setLoaded(false);\n      axios.get(`${API_URL}?amount=${amount}${regionParam}`).then(response => {\n        setNames(response.data);\n        setLoaded(true);\n      });\n    },\n    [amount, region]\n  );\n\n  if (!loaded) {\n    return <p>Loading...</p>;\n  }\n\n  return (\n    <ul>\n      {names.map(name => (\n        <li style={{ color: name.gender === 'male' ? 'blue' : 'hotpink' }}>\n          {name.name} {name.surname}, {name.region}\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nNameList.displayName = 'NameList';\n\nexport default NameList;\n","import React, { useState } from 'react';\nimport './App.css';\n\nimport NameList from './NameList';\n\nconst regions = {\n  'ðŸ‡ºðŸ‡¸': 'United States',\n  'ðŸ‡¬ðŸ‡§': 'England',\n  'ðŸ‡©ðŸ‡ª': 'Germany',\n  'ðŸ‡ªðŸ‡¸': 'Spain',\n  'ðŸ‡«ðŸ‡·': 'France'\n};\n\nconst App = () => {\n  const [amount, setAmount] = useState(2);\n  const [region, setRegion] = useState(null);\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center'\n      }}>\n      <h1>{amount} names</h1>\n      <NameList amount={amount} region={region} />\n      <button onClick={() => setAmount(amount + 1)}>Get more</button>\n      <div style={{ height: '20px' }} />\n      <div\n        style={{\n          display: 'flex',\n          flexDirection: 'row',\n          alignItems: 'center',\n          fontSize: '2em'\n        }}>\n        {Object.keys(regions).map(regionKey => (\n          <button onClick={() => setRegion(regions[regionKey])}>\n            {regionKey}\n          </button>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}